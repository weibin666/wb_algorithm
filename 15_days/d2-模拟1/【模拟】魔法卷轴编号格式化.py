'''
题目描述
在魔法王国的图书馆中，传说有一批由远古法师编写的魔法卷轴，这些卷轴的编号由数字、空格 ' ' 和符号 '-' 组成，错落有致、极难辨识。大法师小慕受命对这些卷轴编号进行规范化，以便整理档案。
大法师规定了编号格式化的魔法规则如下：
1. 首先，移除卷轴编号中所有的空格 ' ' 和破折号 '-'，仅保留数字。
2. 接着，将剩余的数字从左到右按如下方式分组：
  - 每组三个数字，直到无法再组成三位组。
  - 如果剩余 4 个数字，则将其划分为两个两位数的小组；
  - 如果剩余 2 个数字，则保留为一个两位数的小组；
  - 永远不会剩下 1 个数字。
3. 最后，用破折号 '-' 将这些小组连接起来，形成最终格式化的编号。
输入格式
输入包含一个仅由数字（0 到 9）、空格 ' ' 和破折号 '-' 组成的字符串 inputStr。字符串的长度不超过 10000。
输出格式
输出格式化后的魔法编号字符串。
样例
样例1
样例输入：
-9- 3-86 3 6
样例输出：
938-636
样例2
样例输入：
759 4-8 5 -6
样例输出：
759-48-56
题目解析
以第一个样例为例，清洗后字符串的结果如下：
暂时无法在飞书文档外展示此内容
开始分割后，结果如下：

暂时无法在飞书文档外展示此内容
理解题目
本题是一个字符串格式化问题，要求将一个混杂有数字、空格 ' ' 与破折号 '-' 的“卷轴编号”字符串进行标准化处理，使其仅保留数字，并根据指定的规则分组后输出。
核心规则包括三点：
- 所有非数字字符（空格和破折号）都需要移除。
- 将剩余的数字从左至右分组，每组三个数字。如果最后剩下 4 个数字，则分成两个两位小组；如果剩 2 或 3 个数字，则整体作为一个小组。
- 所有小组用破折号 '-' 连接。
该问题可以看作是对字符串的清洗与分组重构，在数据处理与格式标准化场景中非常常见。
使用算法
算法思路包括两部分：
1. 字符筛选：用一轮遍历提取所有数字，过滤掉空格与破折号。
2. 规则分组：在保留纯数字的前提下，从左到右按规则进行分组。为了满足规则中的“最后剩 4 个要分为两个两位小组”的特例，需要判断剩余数字的个数，做出相应的分组策略。
整个过程没有使用复杂的数据结构，仅依赖列表和字符串拼接操作，具备较高的执行效率。
实现
实现过程分为以下三个步骤：
第一步：预处理输入，移除非数字字符
首先遍历整个输入字符串，将所有的空格 ' ' 和破折号 '-' 过滤掉，只保留字符是数字的部分。最终得到一个只包含数字的列表或字符串，记为 digits。
digits = [ch for ch in inputStr if ch.isdigit()]
第二步：按规则进行分组
接下来对 digits 进行从左至右的扫描。使用一个指针 i 从起始位置开始，循环提取长度为 3 的分组，直到剩下的数字个数 ≤ 4。
分组规则如下：
- 如果剩余长度 > 4：不断取 3 个数字构成一组；
- 如果剩余长度 = 4：将其分为两个长度为 2 的小组；
- 如果剩余长度 = 2 或 3：直接作为一个小组；
这一逻辑确保不会出现最后只剩 1 个数字的情况。
第三步：组装输出字符串
将所有分组后的字符串用破折号 '-' 连接，最终输出结果。
'''
class Solution:
    def reformatNumber(self, inputStr: str) -> str:
        # 第一步：移除输入字符串中所有的空格 ' ' 和破折号 '-'，只保留数字字符
        digits = [ch for ch in inputStr if ch.isdigit()]

        res = []  # 初始化结果列表，用于存储每一组格式化后的数字
        i = 0     # 指针，表示当前处理到 digits 的哪个位置
        n = len(digits)  # 总共保留了多少个数字

        # 循环处理：当剩余数字数量大于4时，优先每组三个数字
        while n - i > 4:
            res.append("".join(digits[i:i+3]))  # 将当前位置开始的3个数字组成一组
            i += 3  # 指针右移3位，继续处理下一个三位组

        # 剩下的数字数目在2~4之间时的特殊处理逻辑
        if n - i == 4:
            # 如果还剩下4个数字，则分成两个两位组
            res.append("".join(digits[i:i+2]))      # 前两个数字为一组
            res.append("".join(digits[i+2:i+4]))    # 后两个数字为一组
        else:
            # 如果剩下的是2个或3个数字，则整体作为一组
            res.append("".join(digits[i:]))

        # 最后用 '-' 将每一组连接起来，返回格式化后的编号字符串
        return '-'.join(res)

# 实例化解决方案类
sol = Solution()
# 读取输入字符串
s = input()
# 调用格式化函数并输出结果
print(sol.reformatNumber(s))

