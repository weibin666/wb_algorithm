'''
描述

在一个遥远的魔法王国里，有一座神秘的浮空城，城中的建筑设计非常独特，所有建筑物的布局都遵循着一个特殊的法则：他们以正方形的矩阵形式排列。矩阵的每个位置由魔法符文所标记，表示着强大的力量。每当一位魔法师想要操作这些符文时，他们需要通过行和列的两种方式来读取矩阵。

在浮空城的法师学院中，有一种传送符文叫做“行列转移”，它能够将矩阵中的符文以不同的方式排列。传送符文的法则是这样的：

行优先表达：先从左到右，再从上到下罗列所有元素。
列优先表达：先从上到下，再从左到右罗列所有元素。
某天，学院的首席法师无意中打破了传送符文的平衡，导致传送的矩阵无法恢复。现在，他急需你的帮助。你将收到一个行优先表达的字符串，要求你输出它对应的列优先表达。如果输入的矩阵无法构成一个正方形（即无法形成一个整数平方数的长度），则输出ERROR。

问题要求

你将收到一个字符串 items，表示一个矩阵的行优先表达。这个字符串的长度为 n，其中 1 <= n <= 10000，且仅包含数字字符 0-9。
你的任务是输出对应的列优先表达的字符串，或者如果该字符串无法表达为正方矩阵，则输出 ERROR。
输入描述

一个字符串 items，表示矩阵的行优先表达。

输出描述

如果输入能够表示一个正方矩阵，则输出列优先表达。
如果无法形成正方矩阵，则输出 ERROR。

输入：
435245019
输出：
420341559

输入：
0123456789
输出：
ERROR


'''


class Solution:
    def transpose(self, items):
        # 获取输入字符串的长度
        l = len(items)

        # 计算可能的矩阵边长，即最接近的整数平方根
        n = int(l ** 0.5)

        # 如果 n * n 不等于 l，则说明无法构成正方形矩阵，返回 "ERROR"
        if n * n != l:
            return "ERROR"
        else:
            # 初始化一个空列表用于存储列优先遍历的结果
            ls = []

            # 遍历列（即先从左到右选列）
            for j in range(n):
                # 遍历行（即从上到下选行）
                for i in range(n):
                    # 计算列优先顺序的索引，并添加到列表
                    ls.append(items[i * n + j])

            # 将列表转换为字符串并返回
            return "".join(ls)


# 读取输入
items = input()
# 输出转换后的列优先表达或错误信息
print(Solution().transpose(items))
