'''
todo 题目描述
在魔法王国，魔法师们需要为他们的魔法装置分配一个编号，编号范围为 start 到 end。然而，古老的魔法卷轴上记载着，编号中包含 4 或 18 的设备都会受到邪恶诅咒而无法使用。
现在，魔法委员会希望统计在给定的编号区间内，有多少个编号是可以安全使用的。
输入格式
输入包含一行，包含两个整数 start 和 end（单空格间隔），表示编号区间，满足：
- 0 < start < end <= 100000
输出格式
输出一个整数，表示在该区间内可安全使用的编号数量。
样例
样例1
样例输入：
3 20
样例输出：
15
样例说明：
不可使用的编号为：4, 14, 18。
样例2
样例输入：
1 1000
样例输出：
711


todo 题目解析
理解题目
本题设定在一个虚拟的魔法世界中，要求对一段编号区间内的数字进行筛选。每一个编号代表一个魔法装置的编号，但部分编号由于受到了诅咒而无法使用。具体而言，包含数字“4”或“18”的编号会被判定为不可使用。例如，编号 4、14、18、40、184 等都会因包含“4”或“18”而被排除。
问题的目标是在一个给定区间 [start, end]（其中 0 < start < end <= 100000）中，统计出可以安全使用的编号总数，也就是不包含“4”也不包含“18”的数字个数。
通过分析题目不难发现，主要考察的是字符串匹配与数字遍历的综合判断能力。
使用算法
本题使用的是一种暴力枚举 + 字符串判断的算法，其核心思想是：
- 枚举所有可能的编号；
- 将编号转为字符串，检测是否包含敏感子串“4”或“18”；
- 若编号不包含这两个子串，则认为该编号是“安全的”。
该算法的时间复杂度为 O(n)，在最大情况下 n = 10^5，对于现代计算能力而言是完全可接受的。
实现
实现过程可以拆解为以下几个步骤：
1. 读取输入数据
 从标准输入中获取两个整数 start 和 end，作为编号的起始与终止值。
2. 初始化计数器
 设置一个变量 count 来统计安全编号的数量，初始值为 0。
3. 遍历区间
 使用循环从 start 到 end（包括两端）逐一检查每个编号。
4. 字符串判断是否包含“4”或“18”
 将当前编号转换为字符串，并使用字符串匹配方法（如 Python 中的 '4' in str(num)）判断是否包含不安全字符：
  - 如果编号中包含“4”或“18”，说明该编号受到诅咒，跳过统计；
  - 如果均不包含，则说明该编号是安全的，将计数器 count 加 1。
5. 输出结果
 最终，输出统计的安全编号总数 count。

'''


class Solution:
    def get_normal_device_number(self, start, end):
        """
        计算在指定编号区间内，哪些编号是可以安全使用的（不包含4或18）。

        :param start: 编号范围的起始值（大于0）
        :param end: 编号范围的结束值（小于等于100000）
        :return: 可安全使用的编号数量
        """
        count = 0  # 计数器，用于统计符合条件的编号数量

        # 遍历编号区间 [start, end]
        for num in range(start, end + 1):
            # 将当前数字转换为字符串，判断是否包含'4'或'18'
            if '4' in str(num) or '18' in str(num):
                continue  # 如果包含，则跳过该编号，不计入安全编号

            count += 1  # 该编号符合安全条件，计数器+1

        return count  # 返回可安全使用的编号数量


# 读取用户输入，输入格式为两个整数，中间用空格分隔
start, end = map(int, input().strip().split())

# 创建 Solution 类的实例
function = Solution()

# 调用方法计算安全编号数量
result = function.get_normal_device_number(start, end)

# 输出结果
print(result)
