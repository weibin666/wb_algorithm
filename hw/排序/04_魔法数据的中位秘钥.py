'''
第一行输入一个正整数 count，表示魔法能量序列中的元素个数，满足 1 <= count <= 10000。
第二行输入 count 个非负整数，表示魔法能量序列 arr，其中 0 <= arr[i] <= 100000。
输出格式
输出一个整数，表示提取出的“中位秘钥”。
样例
样例1
样例输入：
10
2 3 1 6 1 10 2 5 9 8
样例输出：
2
样例说明：
- 按升序排列为：[1, 1, 2, 2, 3, 5, 6, 8, 9, 10]
- 前三分之一个数为 ceil(10/3) = 4，即 [1, 1, 2, 2]
- 中位数为 (1 + 2) // 2 = 1.5 向上取整为 2
题目解析
理解题目
本题要求从一个无序的魔法能量序列中提取一个特定的数值，称为“中位秘钥”。提取规则涉及两个步骤：
1. 首先对原始能量序列进行升序排序；
2. 然后仅保留前三分之一个元素（如果不能整除，向上取整）；
3. 最后从这部分元素中计算中位数，作为最终的“中位秘钥”：
  - 如果数量为奇数，取中间那个元素；
  - 如果数量为偶数，取中间两个数的平均值，并向上取整。
这道题的关键点在于对“前三分之一”元素的精确提取，以及中位数计算时的向上取整处理，而非简单的浮点数平均。
使用算法
本题的核心算法可归纳为排序 + 取中位数，时间复杂度主要由排序步骤主导。整体思路如下：
- 对输入序列 arr 进行升序排序，时间复杂度为 O(n log n)；
- 计算前 ceil(n / 3) 个元素构成的子数组 subset；
- 根据 subset 的长度 k 的奇偶性，计算其中位数：
  - 奇数：直接取第 k // 2 个元素；
  - 偶数：取 subset[k//2 - 1] 和 subset[k//2] 的平均值，并向上取整。
通过上述步骤，可以准确无误地计算出题目要求的“中位秘钥”。
实现
整个实现可以拆分为以下几个逻辑模块：
1. 输入读取与处理：
  - 读取魔法能量序列的长度 count；
  - 读取序列 arr，并转为整数列表。
2. 排序操作：
  - 使用内置排序算法对 arr 进行升序排序，确保接下来的操作基于有序数据。
3. 计算前三分之一的子集：
  - 利用数学函数 ceil(count / 3) 计算子集的长度；
  - 从排序后的数组中提取前 k 个元素，形成新的子集 subset。
4. 中位数提取规则实现：
  - 若 k 为奇数，返回 subset[k // 2]；
  - 若 k 为偶数，返回 ceil((subset[k//2 - 1] + subset[k//2]) / 2)。
5. 结果输出：
  - 输出计算所得的中位秘钥。
'''
import math

# 定义一个处理魔法能量序列的类
class Solution:
    # 定义方法：计算“中位秘钥”
    def median_of_first_third(self, count, arr):
        # 将魔法能量序列进行升序排序
        arr.sort()

        # 计算前三分之一的数量，不能整除时向上取整
        '''
        学习这种写法：
        k = math.ceil(count / 3)
        '''
        k = math.ceil(count / 3)


        # 取出排好序后的前 k 个元素作为子集
        subset = arr[:k]

        # 根据子集元素的个数判断中位数的计算方式
        if k % 2 == 1:
            # 如果子集长度为奇数，直接取中间那个元素作为中位数
            median = subset[k // 2]
        else:
            # 如果子集长度为偶数，取中间两个数的平均值（向上取整）
            mid1 = subset[k // 2 - 1]  # 中间第一个数
            mid2 = subset[k // 2]      # 中间第二个数
            median = math.ceil((mid1 + mid2) / 2)  # 平均值向上取整

        # 返回最终计算得到的中位秘钥
        return median

# 主函数入口
if __name__ == "__main__":
    # 读取输入的元素个数
    count = int(input())
    # 读取魔法能量序列并转换为整数列表
    arr = list(map(int, input().split()))
    # 创建 Solution 类的实例
    sol = Solution()
    # 调用方法并输出中位秘钥
    print(sol.median_of_first_third(count, arr))

