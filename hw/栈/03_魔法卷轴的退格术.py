'''

题目描述
在魔法大陆的图书塔中，小慕发现了一份古老的卷轴，卷轴中记载着一段神秘的字符序列，其中夹杂着特殊的魔法符号 $。
每一个 $ 都代表一种强力的“退格术”，它可以抹除其前方紧邻的一个字母字符。但若 $ 出现在卷轴最前或其前面没有任何字母时，它将不产生任何效果。
现在，小慕希望你能帮他解析这段卷轴，使用魔法退格术处理整段字符后，返回最终剩下的字符序列。
如果最终卷轴为空，请输出 null 表示。
输入格式
一行，包含一个仅由小写英文字母 (a-z) 和符号 $ 组成的字符串 s。
字符串长度满足：1 <= len(s) <= 10000
输出格式
一行，表示退格术处理后的最终字符串。
若最终结果为空串，请输出 null。
样例
样例1
样例输入：
$$df$c$
样例输出：
d
样例2
样例输入：
$abc$$
样例输出：
a
样例3
样例输入：
$$$
样例输出：
null
'''

class Solution:
    def processScroll(self, s: str) -> str:
        # 使用栈（先进后出结构）来模拟退格操作的过程
        stack = []

        # 遍历字符串中的每个字符
        for ch in s:
            if ch == '$':
                # 如果当前字符是 '$'，表示执行一次退格操作
                # 只有当栈中有元素时，才执行退格（即弹出栈顶元素）
                if stack:
                    stack.pop()
                # 如果栈为空，说明没有字母可退格，跳过该符号
            else:
                # 如果是正常的小写字母，则将其压入栈中
                stack.append(ch)

        # 所有字符处理完毕后，将栈中剩余字符拼接为结果字符串
        result = ''.join(stack)

        # 如果结果字符串为空，按题目要求返回字符串 'null'
        return result if result else 'null'


# 主函数入口，用于读取输入并调用解决方法
if __name__ == "__main__":
    # 从标准输入读取一行并去除首尾空白字符
    s = input().strip()

    # 创建 Solution 类的实例
    sol = Solution()

    # 调用处理函数并输出结果
    print(sol.processScroll(s))
