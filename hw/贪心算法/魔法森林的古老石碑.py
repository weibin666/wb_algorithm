'''
题目练习网址：https://www.algomooc.com/problem/K0068
视频讲解回放：
题目描述
魔法森林中的一块古老石碑，刻着一段神秘的文字。现在，有两位勇士分别带着他们的目标词汇，他们需要找到这两个词汇在这段文字中最短的间隔距离。你需要帮助他们计算出这两个词汇之间的最短距离。
输入格式
- 第一行输入一段字符串 words，表示魔法石碑上的文字，其中每个单词由空格分隔。
- 第二行输入一个字符串 word1，表示第一个目标单词。
- 第三行输入一个字符串 word2，表示第二个目标单词。
- 1 <= len(words) <= 50000
输出格式
- 输出一个整数，表示这两个目标单词之间的最短距离，单位是单词的个数。如果两个目标单词不存在，输出 -1。
样例
样例1
样例输入：
makes practice practice coding practice makes perfect makes
makes
coding
样例输出：
1
样例说明：
魔法之石中的 "makes" 与 "coding" 之间最短的距离是1（只隔了一个 "practice"）。   
题目解析
理解题目
本题要求在一段由多个单词组成的字符串中，找到两个目标单词之间最短的间隔距离，间隔的单位为单词数（不包括两个目标词本身）。
需要注意的是：
- 两个目标单词可以在字符串中多次出现，要求输出它们之间所有可能组合中距离最短的一个。
- 如果其中一个或两个单词不存在，则输出 -1。
- 所有单词之间由空格分隔，不存在标点或其他符号。
使用算法
本题使用的是一种线性扫描 + 指针标记的算法。其核心思想是：
- 在遍历单词序列的过程中，记录目标单词的位置；
- 每当两个目标单词都出现过时，就计算它们的位置差并更新最短值；
- 最终得到全局最短间隔。
这种方法属于双指针思想的变种，适合用来处理需要在一维序列中动态维护两个特定元素之间关系的问题，具有较好的时间性能。
实现
本题的实现可以分为以下几个步骤：
1. 将整段字符串按空格拆分为单词列表，用于后续逐个处理。
2. 初始化两个位置指针 p1 和 p2，分别用于记录目标单词 word1 和 word2 上一次出现的位置，初始值设为 -1，表示尚未出现。
3. 遍历整个单词列表：
  - 当当前单词等于 word1 时，更新 p1 的位置；
  - 当当前单词等于 word2 时，更新 p2 的位置；
  - 每当 p1 和 p2 都不为 -1（即两个单词都已出现至少一次），就计算它们之间的距离 abs(p1 - p2) - 1 并更新当前的最小值。
4. 判断是否有合法结果：
  - 如果从未更新过最小值，说明至少一个单词未出现，返回 -1；
  - 否则，返回最终记录的最小间隔距离。
整个流程是一次线性遍历，具有效率高、逻辑清晰的特点，能够很好地应对题目中最大单词数量为 50000 的情况。

'''
class Solution:
    def shortestDistance(self, words: str, word1: str, word2: str) -> int:
        # 初始化两个变量 p1 和 p2 分别记录 word1 和 word2 上一次出现的位置，初始为 -1 表示未出现
        p1 = p2 = -1
        # 初始化最小距离为无穷大
        ans = float('inf')
        # 将输入的字符串按空格分隔成单词列表
        word_ls = words.split()
        
        # 遍历每一个单词及其索引
        for i, s in enumerate(word_ls):
            # 如果当前单词是 word1，记录其出现位置
            if s == word1:
                p1 = i
            # 如果当前单词是 word2，记录其出现位置
            elif s == word2:
                p2 = i

            # 如果两个目标单词都已出现过
            if p1 != -1 and p2 != -1:
                # 更新最小距离，注意减去1表示“间隔的单词数”
                ans = min(ans, abs(p1 - p2) - 1)
        
        # 如果两个单词中至少有一个没出现过，返回 -1
        if ans == float('inf'):
            ans = -1
        # 返回两个目标单词之间的最短间隔距离
        return ans

if __name__ == "__main__":
    sol = Solution()
    # 读取整段输入文字，按字符串格式读取
    words = input()
    # 读取第一个目标单词
    word1 = input()
    # 读取第二个目标单词
    word2 = input()
    # 输出最短间隔距离
    print(sol.shortestDistance(words, word1, word2))
