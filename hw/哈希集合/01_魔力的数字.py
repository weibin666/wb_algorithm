'''
题目描述
在魔法大陆中，拥有魔力的数字是独一无二的。为了防止魔法力量失控，国王要求每个魔法师都用数字序列表示其魔力。如今，国王命令你找出两个魔法师的魔力差为给定值 diff 的所有不同组合的个数。
在这个问题中：
- 每个数字代表一位魔法师的魔力；
- 数字序列中的元素是唯一的；
- 如果两个数字之间的差值等于给定的 diff，就认为他们形成了一个符合条件的组合；
- 组合是无序的，即 (a, b) 和 (b, a) 视为同一组合。
你需要帮助国王计算出所有符合条件的不同组合的个数。
输入格式
输入三行：
1. 第一行包含一个整数 diff，表示给定的差值，范围为 [-50000, 50000]。
2. 第二行包含一个整数 n，表示数组的长度，范围为 [2, 102400]。
3. 第三行包含 n 个由单个空格分割的整数，表示魔法师们的魔力值，范围为 [-20000, 102400]。
输出格式
输出一个整数，表示满足条件的不同组合的个数。
样例
样例1
样例输入：
3
5
1 3 2 5 4
样例输出：
2
样例说明：
魔法师们的魔力值为 [1, 3, 2, 5, 4]，差值 diff 为 3。其中 4 - 1 = 3 和 5 - 2 = 3，因此满足条件的组合有 2 个。
样例2
样例输入：
-1
3
1 2 3
样例输出：
2
样例说明：
魔法师们的魔力值为 [1, 2, 3]，差值 diff 为 -1。其中 1 - 2 = -1 和 2 - 3 = -1，因此满足条件的组合有 2 个。

'''


class Solution:
    def solve(self, diff: int, arr: list):
        # 使用 set() 将列表转换为集合，以便快速查找元素
        st = set(arr)
        # 遍历集合中的每个元素 x，检查是否存在 x + diff 的元素
        # 如果存在，则计数 +1
        '''
        学会转换思路：x + diff in st
        '''
        return sum(1 for x in st if x + diff in st)


# 读取输入的差值 diff
diff = int(input())

# 读取数组的长度 n（虽然代码中并未直接使用 n，但用于读取数据）
n = int(input())

# 读取数组并转换为列表
arr = list(map(int, input().split()))

# 创建 Solution 类的实例并调用 solve 方法计算符合条件的组合数量
print(Solution().solve(diff, arr))
