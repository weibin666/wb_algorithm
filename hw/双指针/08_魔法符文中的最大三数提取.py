'''
题目描述
在魔法大陆的一片废墟中，发现了一段神秘的 符文字符串，其中蕴含了隐藏的数字魔法。你需要从符文字符串中提取最大的 三个整数 并将它们按 降序排列。如果整数数量不足三个，则取实际数量。
提取规则：
1. 负号规则：符号 - 紧跟数字时，视为负号，表示负整数。例如，a-132b 中可抽取整数 -132。
2. 完整提取规则：必须提取完整的整数，不能截取。例如，a-132b 中只能提取 -132，不能提取 -1、-13、-12 或 32。
3. 前导零规则：提取后的整数需移除前导零。例如，007 应输出为 7。
4. 范围规则：数字范围为 [-2^{31}, 2^{31}-1]，超出此范围的数字不合法，不参与统计。
输入描述
输入一个字符串 runeString，长度满足 1≤∣runeString∣≤100，其中：
- runeString 包含可见字符（包括字母、数字、符号等）。
- runeString 保证至少包含一个数字。
1. 保证输入字符串中至少有一个合法整数。
2. 输出的整数之间用空格分隔，按降序排列。
3. 合法整数需移除前导零并在 [−2^31,2^31−1] 范围内。
输出描述
输出一个最多包含三个整数的列表，按照从大到小的顺序排列。
样例
样例1
样例输入：
v76b-68-48()_66!q
样例输出：
76 66 -48
样例说明：
提取到的整数为：76, -68, -48, 66，按照降序排列为 [76, 66, -48]。
样例2
样例输入：
-007abc-12-50d1000
样例输出：
1000 -7 -12
样例3
样例输入：
abc100xyz50
样例输出：
100 50

'''
from typing import List  # 引入 List 类型，用于指定函数返回值的类型


class Solution:
    def max_three_numbers(self, rune_string: str) -> List[int]:
        # 定义函数 max_three_numbers，接收一个字符串参数 rune_string，返回值为整数列表
        i = 0  # 初始化索引 i，用于遍历字符串
        n = len(rune_string)  # 获取字符串的长度
        ans = []  # 初始化一个空列表 ans，用于存放从字符串中提取的数字

        while i < n:  # 当 i 小于字符串长度时，继续遍历
            if rune_string[i].isdigit():  # 如果当前字符是数字
                j = i  # 从当前位置 i 开始，初始化 j
                while j < n and rune_string[j].isdigit():  # 当 j 小于字符串长度且当前字符是数字
                    j += 1  # 继续向右移动 j，直到遇到非数字字符为止
                if i > 0 and rune_string[i - 1] == '-':  # 如果当前位置 i 前面有负号（即负数）
                    i -= 1  # 将 i 向前移一位，确保负号包含在数字中
                val = int(rune_string[i:j])  # 提取从 i 到 j 之间的数字并转化为整数
                ans.append(val)  # 将整数 val 添加到 ans 列表中
                i = j  # 更新 i，跳到数字后面的字符位置
            else:
                i += 1  # 如果当前字符不是数字，则 i 向右移动一位

        # 对 ans 列表中的数字进行排序，并过滤掉超出范围的数字（范围：[-2^31, 2^31-1]）
        ans = [x for x in sorted(ans, reverse=True) if -2 ** 31 <= x <= 2 ** 31 - 1]

        return ans[:3]  # 返回排序后列表中的前 3 个最大值


if __name__ == '__main__':
    sol = Solution()  # 创建 Solution 类的实例 sol
    rune_string = input()  # 从输入中获取字符串 rune_string
    print(*sol.max_three_numbers(rune_string))  # 调用 max_three_numbers 方法，并打印返回的前 3 个数字
