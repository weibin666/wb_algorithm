'''
题目描述
在奇幻王国中，魔法师小慕负责管理一片由魔法水晶组成的“内存之域”。这片区域被划分为若干个 相同大小 的魔法水晶块。每块水晶块要么空闲，等待被赋能，要么已被其他魔法师占用。
王国的魔法系统用一串字符 memory 记录每块水晶块的状态，其中：
- '.' 表示该水晶块是空闲的；
- 'x' 表示该水晶块已被占用（任意魔法符文，统一表示为 x）；
小慕掌握释放魔法的能力，他最多可以释放其中 cnt 个被占用的魔法水晶块，使其变为空闲状态（即 'x' 变成 '.'）。
现在他希望通过最多释放 cnt 块水晶，获得一段 连续空闲 的最大长度的魔法水晶块区域。
你的任务是帮助小慕计算，在最优释放方案下，最多可以获得多少块连续空闲的水晶。
输入格式
输入包含两行：
第一行一个字符串 memory，表示初始的水晶块状态，仅包含字符 '.' 和 'x'，字符串长度满足 1 <= len(memory) <= 10^5。
第二行一个整数 cnt，表示最多可以释放的水晶块数，满足 0 <= cnt <= len(memory)。
输出格式
输出一个整数，表示通过最多释放 cnt 块被占用的水晶后，可以获得的最长连续空闲魔法水晶块数量。
样例
样例1
样例输入：
..x..x..xx...
2
样例输出：
8
样例说明：
对字符串 memory = "..x..x..xx..."：
- 若释放第 3 和第 6 个水晶块（即将 memory[2] 与 memory[5] 从 'x' 变为 '.'）， 则得到从 memory[0] 到 memory[7] 的连续空闲区域，总长度为 8。
- 其他释放方式所得最大连续空闲长度都不超过 8。
因此输出为 8。
'''
class Solution:
    def maxFreeMemory(self, memory: str, cnt: int) -> int:
        # 初始化最大长度为 0
        max_len = 0

        # 初始化滑动窗口的左指针
        left = 0

        # 当前窗口内释放的 'x' 数量（即替换成 '.' 的次数）
        used = 0

        # 右指针从左到右扫描整个字符串
        for right in range(len(memory)):
            if memory[right] == 'x':
                # 当前字符是 'x'，若要包含它，表示需要释放
                used += 1

            # 如果释放的 'x' 超过了允许的最大数量 cnt
            # 就需要从窗口左边缩小窗口，直到释放数不超过 cnt
            while used > cnt:
                if memory[left] == 'x':
                    # 如果左边界是一个被释放的 'x'，现在要从窗口剔除它
                    used -= 1
                # 向右移动左指针，缩小窗口
                left += 1

            # 计算当前窗口的长度，并更新最大长度
            # 窗口为 [left, right]，长度是 right - left + 1
            max_len = max(max_len, right - left + 1)

        # 返回在最多释放 cnt 次的前提下，能获得的最长连续空闲长度
        return max_len


# 创建 Solution 实例
sol = Solution()

# 读取输入的字符串 memory，并去除首尾空白字符
memory = input().strip()

# 读取最多允许释放的 'x' 的数量
cnt = int(input())

# 输出最大可获得的连续空闲块长度
print(sol.maxFreeMemory(memory, cnt))

